#!/bin/sh

set -eu

dotfiles=~/.dotfiles
repo='http://github.com/syuzuki/dotfiles'
repo_private='http://github.com/syuzuki/dotfiles-private'

dry_run=
opt_sets=base
vagrant=

sets=

help_exit() {
    cat <<EOF
usage: $0 [OPTIONS] [CONFIG_SETS]

OPTIONS:
    -h, --help      Print this help and exit
    -n, --dry-run   Do not modify filesystem
        --vagrant   Vagrant configuration

CONFIG_SETS:
    base    CLI application configuration, Installed by default
    gui     GUI application configuration
    desktop desktop environment configuration
    private Private configuration, Required authorization
EOF
    exit
}

error_arg() {
    printf '\e[31mError: '
    printf "$@"
    printf '\e[m\n'
    printf '\n'
    printf '`'"$0"' -h` to see help\n'
    exit 1
}

die() {
    printf '\e[31mError: '
    printf "$@"
    printf '\e[m\n'
    exit 1
}

warn() {
    printf '\e[33mWarning: '
    printf "$@"
    printf '\e[m\n'
}

region() {
    printf '\e[32m'
    printf "$@"
    printf '\e[m\n'
}

log() {
    printf "$@"
    printf '\n'
}

detect_env() {
    os="$(uname -o)"
    case "${os}" in
        GNU/Linux)
            id="$(sh -ceu '. /etc/os-release; printf '\''%s'\'' "${ID}"')"
            case "${id}" in
                arch|archarm)
                    export env=arch
                    ;;
                ubuntu)
                    export env=ubuntu
                    ;;
                *)
                    die 'Unsupported Linux distribution: id %s' "${id}"
                    ;;
            esac
            ;;
        *)
            die 'Unsupported OS: %s' "${os}"
            ;;
    esac
}

parse_opts() {
    while [ "$#" -gt 0 ]; do
        optarg_available=
        optarg_used=
        case "$1" in
            -[!-]|--?*)
                opt="$1"
                shift
                if [ "$#" -gt 0 ]; then
                    optarg="$1"
                    optarg_available=true
                fi
                ;;
            --)
                shift
                continue
                ;;
            -*)
                optarg="${1#-?}"
                opt="${1%"${optarg}"}"
                optarg_available=true
                shift
                set -- "-${opt}" "$@"
                ;;
            *)
                opt="$1"
                shift
                ;;
        esac

        case "${opt}" in
            -h|--help)
                help_exit
                ;;
            -n|--dry-run)
                dry_run=true
                ;;
            --vagrant)
                vagrant=true
                ;;
            *[!abcdefghijklmnopqrstuvwxyz]*)
                error_arg "Unexpected argument: %s" "${opt}"
                ;;
            *)
                opt_sets="${opt_sets} ${opt}"
                ;;
        esac

        if [ -n "${optarg_used}" ]; then
            shift
        fi
    done
}

add_set() {
    for set in ${sets}; do
        if [ "$1" = "${set}" ]; then
            return
        fi
    done

    if [ ! -e "${dotfiles}/$1/set.info" ]; then
        if [ $# -eq 1 ]; then
            die 'Invalid set specified: %s' "$1"
        else
            die 'Invalid set specified: %s, required by %s' "$1" "$2"
        fi
    fi
    deps="$(sh -ceu ". ${dotfiles}/$1/set.info && printf '%s' \"\${dependencies}\"")"

    for dep in ${deps}; do
        add_set "${dep}" "$1"
    done
    sets="${sets+${sets} }$1"
}

add_sets() {
    for set in $@; do
        add_set "${set}"
    done
}

load_sets() {
    if [ -e "${dotfiles}/status/installed_sets.lst" ]; then
        input="$(cat "${dotfiles}/status/installed_sets.lst")"
        for i in ${input}; do
            add_set "${i}"
        done
    fi
}

save_sets() {
    if [ -z "${dry_run}" ]; then
        [ -e "${dotfiles}/status" ] || mkdir "${dotfiles}/status"
        printf '%s\n' ${sets} >"${dotfiles}/status/installed_sets.lst"
    fi
}

retrieve() {
    region 'Retrieving repositories'

    if [ -z "${vagrant}" ]; then
        if [ -d "${dotfiles}" ]; then
            (cd "${dotfiles}"; git pull)
        else
            git clone --filter=blob:none "${repo}" "${dotfiles}"
        fi

        for set in ${opt_sets} ${sets}; do
            case "${set}" in
                private) ;;
                *) continue;;
            esac

            if [ -d "${dotfiles}/private" ]; then
                (cd "${dotfiles}/private"; git pull)
            else
                mkdir -m 700 "${dotfiles}/private"
                git clone --filter=blob:none "${repo_private}" "${dotfiles}/private"
            fi
            break
        done
    else
        rsync -a --delete --exclude-from - /vagrant/ "${dotfiles}/" <<EOF
/.git
/private/.git
/status
/vagrant
EOF
    fi
}

package() {
    region 'Installing packages'

    for set in ${sets}; do
        for f in "${set}"/etc/package-pre.hook/*; do
            case "${f##*/}" in
                .|..) continue;;
            esac
            [ -x "${f}" ] || continue

            log 'Running pre-package hook %s' "${f}"
            "./${f}"
        done
    done

    case "${env}" in
        arch)
            package_manager=pacman
            ;;
        ubuntu)
            package_manager=apt
            ;;
        *)
            die 'Unreachable statement: $env should have valid value'
            ;;
    esac

    package_lists=''
    for set in ${sets}; do
        if [ ! -e "${set}/etc/package.${env}.lst" ]; then
            die 'Unsupported configuration set on env=%s: %s' "${env}" "${set}"
        fi
        package_lists="${package_lists:+"${package_lists} "}${set}/etc/package.${env}.lst"
    done

    if [ -z "${dry_run}" ]; then
        case "${package_manager}" in
            pacman)
                cat $package_lists | sudo pacman -S --needed --noconfirm -
                ;;
            apt)
                cat $package_lists | xargs sudo apt-get --yes install
                ;;
            *)
                die 'Unreachable statement: $package_manager should have valid value'
                ;;
        esac
    fi

    for set in ${sets}; do
        for f in "${set}"/etc/package-post.hook/*; do
            case "${f##*/}" in
                .|..) continue;;
            esac
            [ -x "${f}" ] || continue

            log 'Running post-package hook %s' "${f}"
            "./${f}"
        done
    done
}

deploy_dir() {
    for f in "$1/$2"* "$1/$2".*; do
        f="${f#"$1/$2"}"
        case "${f}" in
            .|..) continue;;
        esac
        [ -e "$1/$2${f}" ] || continue

        if [ -z "$2" ]; then
            case "${f}" in
                bin) ;;
                [!.]*|.git|.gitignore) continue;;
            esac
        fi

        if [ -d "$1/$2${f}" ]; then
            case "$2${f}" in
                .ssh) mode=700;;
                *) mode=;;
            esac

            if [ ! -e ~/"$2${f}" ]; then
                log 'mkdir %s%s' "$2${f}" "${mode:+ as "${mode}"}"
                if [ -z "${dry_run}" ]; then
                    mkdir${mode:+ -m "${mode}"} ~/"$2${f}"
                fi
            fi

            deploy_dir "$1" "$2${f}/"
        else
            log 'link %s -> %s' "$2${f}" ".dotfiles/$1/$2${f}"
            if [ -e ~/"$2${f}" ] && [ ! -L ~/"$2${f}" ]; then
                timestamp="$(date '+%Y%m%d%H%M%S')"
                warn 'Backup existing file %s as %s' "$2${f}" "$2${f}.${timestamp}"
                if [ -z "${dry_run}" ]; then
                    mv ~/"$2${f}" ~/"$2${f}.${timestamp}"
                fi
            fi
            if [ -z "${dry_run}" ]; then
                ln -sf "${dotfiles}/$1/$2${f}" ~/"$2${f}"
            fi
        fi
    done
}

deploy() {
    region 'Deploying files'

    for set in ${sets}; do
        for f in "${set}"/etc/deploy-pre.hook/*; do
            case "${f##*/}" in
                .|..) continue;;
            esac
            [ -x "${f}" ] || continue

            log 'Running pre-deploy hook %s' "${f}"
            "./${f}"
        done

        deploy_dir "${set}" ''

        for f in "${set}"/etc/deploy-post.hook/*; do
            case "${f##*/}" in
                .|..) continue;;
            esac
            [ -x "${f}" ] || continue

            log 'Running post-deploy hook %s' "${f}"
            "./${f}"
        done
    done
}

load_sets
detect_env
parse_opts "$@"

retrieve
add_sets ${opt_sets}
cd "${dotfiles}"
save_sets
package
deploy
