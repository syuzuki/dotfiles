[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
    let g:dein#auto_recache = v:true
'''

[[plugins]]
repo = 'RRethy/nvim-base16'
hook_add = '''
    lua <<EOF
        -- Customized decaf
        require'base16-colorscheme'.colorschemes.custom = {
            base00 = '#16161d', base01 = '#303030', base02 = '#404040', base03 = '#808080',
            base04 = '#aaaaaa', base05 = '#cccccc', base06 = '#e0e0e0', base07 = '#ffffff',
            base08 = '#e57e62', base09 = '#f2b56a', base0A = '#f2cb75', base0B = '#abc46c',
            base0C = '#abc0e5', base0D = '#88b4d5', base0E = '#e3aaea', base0F = '#f28baa',
        }

        _G.setup_colorscheme = function()
            local cs = require'base16-colorscheme'

            cs.setup('custom')
            local colors = cs.colors

            for mode, color in pairs {
                Normal = colors.base0D,
                Visual = colors.base0E,
                Select = colors.base0F,
                Insert = colors.base0B,
                Replace = colors.base09,
                Command = colors.base0A,
                Terminal = colors.base08,
            } do
                vim.cmd('highlight StatusLineMode' .. mode .. ' guibg=' .. color)
            end

            vim.cmd('highlight ModeMsg guifg=' .. colors.base03)

            for _, hi in ipairs({
                'Add',
                'Change',
                'Delete',
                'Text',
                'Added',
                'File',
                'NewFile',
                'Line',
                'Removed',
            }) do
                vim.cmd('highlight Diff' .. hi .. ' guibg=' .. colors.base01)
            end

            vim.cmd [[
                highlight! link IndentBlanklineChar Whitespace
                highlight! link IndentBlanklineSpaceChar Whitespace
                highlight! link IndentBlanklineSpaceCharBlankline Whitespace
                highlight! link IndentBlanklineContextChar Whitespace
                highlight! link IndentBlanklineContextStart Label

                highlight! link GitSignsAdd GitGutterAdd
                highlight! link GitSignsChange GitGutterChange
                highlight! link GitSignsDelete GitGutterDelete
            ]]

            for _, hi in ipairs({
                { name = 'NextKey', color = 'base08' },
                { name = 'NextKey1', color = 'base0D' },
                { name = 'NextKey2', color = 'base0C' },
            }) do
                vim.cmd('highlight Hop' .. hi.name .. ' guifg=' .. colors[hi.color])
            end
            vim.cmd [[
                highlight! link HopUnmatched Comment
                highlight! link HopCursor Cursor
            ]]

            vim.cmd [[
                doautocmd ColorScheme base16-custom
            ]]
        end
EOF

    augroup config_colorscheme
        autocmd!
        autocmd VimEnter * nested call v:lua.setup_colorscheme()
    augroup end
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
hook_add = '''
    lua <<EOF
        require'indent_blankline'.setup {}
EOF
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
hook_add = '''
    lua <<EOF
        require('gitsigns').setup {
            on_attach = function(bufnr)
                local function map(mode, lhs, rhs, opts)
                    opts = vim.tbl_extend(
                        'force', { noremap = true, silent = true }, opts or {})
                    vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts)
                end

                map('n', ']c', [[&diff ? ']c' : '<Cmd>Gitsigns next_hunk<CR>']],
                    { expr=true })
                map('x', ']c', [[&diff ? ']c' : '<Cmd>Gitsigns next_hunk<CR>']],
                    { expr=true })
                map('n', '[c', [[&diff ? '[c' : '<Cmd>Gitsigns prev_hunk<CR>']],
                    { expr=true })
                map('x', '[c', [[&diff ? '[c' : '<Cmd>Gitsigns prev_hunk<CR>']],
                    { expr=true })

                map('n', '<Leader>hs', '<Cmd>Gitsigns stage_hunk<CR>')
                map('x', '<Leader>hs', '<Cmd>Gitsigns stage_hunk<CR>')
                map('n', '<Leader>hS', '<Cmd>Gitsigns stage_buffer<CR>')
                map('n', '<Leader>hu', '<Cmd>Gitsigns undo_stage_hunk<CR>')
                map('n', '<Leader>hr', '<Cmd>Gitsigns reset_hunk<CR>')
                map('x', '<Leader>hr', '<Cmd>Gitsigns reset_hunk<CR>')
                map('n', '<Leader>hR', '<Cmd>Gitsigns reset_buffer<CR>')

                map('n', '<Leader>hp', '<Cmd>Gitsigns preview_hunk<CR>')
                map('n', '<Leader>hb', [[<Cmd>lua require'gitsigns'.blame_line { full = true }<CR>]])
                map('n', '<Leader>tb', '<Cmd>Gitsigns toggle_current_line_blame<CR>')
                map('n', '<Leader>hd', '<Cmd>Gitsigns diffthis<CR>')
                map('n', '<Leader>hD', [[<Cmd>lua require'gitsigns'.diffthis('~')<CR>]])
                map('n', '<Leader>td', '<Cmd>Gitsigns toggle_deleted<CR>')

                map('o', 'ih', '<Cmd>Gitsigns select_hunk<CR>')
                map('x', 'ih', ':<C-u>Gitsigns select_hunk<CR>')
            end,
        }
EOF
'''

[[plugins]]
repo = 'nvim-lua/popup.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add = '''
    lua <<EOF
        local function preview_scrolling_lines(lines)
            local action_state = require'telescope.actions.state'

            return function(prompt_buffer)
                local previewer = action_state.get_current_picker(prompt_buffer).previewer
                if type(previewer) ~= 'table' or not previewer.scroll_fn then
                    return
                end

                previewer:scroll_fn(lines)
            end
        end

        require'telescope'.setup {
            defaults = {
                scroll_strategy = 'limit',
                mappings = {
                    i = {
                        ['<Esc>'] = 'close',
                        ['<C-e>'] = preview_scrolling_lines(3),
                        ['<C-y>'] = preview_scrolling_lines(-3),
                    },
                },
            },
            pickers = {
                buffers = {
                    ignore_current_buffer = true,
                    sort_lastused = true,
                },
                find_files = {
                    follow = true,
                    hidden = true,
                },
            },
        }
EOF

    nnoremap <M-b> <Cmd>lua require'telescope.builtin'.buffers {}<CR>
    nnoremap <M-f> <Cmd>lua require'telescope.builtin'.find_files {}<CR>
    nnoremap <M-F> <Cmd>lua require'telescope.builtin'.file_browser {}<CR>
    nnoremap <M-g> <Cmd>lua require'telescope.builtin'.current_buffer_fuzzy_find {}<CR>
    nnoremap <M-G> <Cmd>lua require'telescope.builtin'.live_grep {}<CR>

    nnoremap <Leader>gl <Cmd>lua require'telescope.builtin'.git_bcommits {}<CR>
    nnoremap <Leader>gL <Cmd>lua require'telescope.builtin'.git_commits {}<CR>
    nnoremap <Leader>gs <Cmd>lua require'telescope.builtin'.git_status {}<CR>
    nnoremap <Leader>gb <Cmd>lua require'telescope.builtin'.git_branches {}<CR>
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_event = ['BufNewFile', 'BufRead']

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufNew', 'BufRead']
hook_source = '''
    " Loading external modules (such as `nvim-treesitter-textobjects`)
    "
    " Required load order:
    " 1. Add `nvim-treesitter` into lua `package.path`
    " 2. Load `MODULE_PLUGIN.vim` to call `init` of the module
    " 3. Call `setup` of `nvim-treesitter` with `MODULE = { enable = true }`
    "
    " 1 and 2 can be done by specifying same `on_*` to `nvim-treesitter` to the plugin of the module

    lua <<EOF
        require'nvim-treesitter.configs'.setup {
            ensure_installed = 'maintained',
            ignore_install = {},
            highlight = {
                enable = true,
                disable = {},
            },
            incremental_selection = {
                enable = true,
                keymaps = {
                    init_selection = '<Plug>(treesitter-init-selection)',
                    node_incremental = 'J',
                    scope_incremental = '<Plug>(treesitter-scope-incremental)',
                    node_decremental = 'K',
                },
            },
            textobjects = {
                select = {
                    enable = true,
                    lookahead = true,
                    keymaps = {
                        ['ib'] = '@block.inner',
                        ['ab'] = '@block.outer',
                        ['ij'] = '@call.inner',
                        ['aj'] = '@call.outer',
                        ['iy'] = '@class.inner',
                        ['ay'] = '@class.outer',
                        ['ao'] = '@comment.outer',
                        ['ii'] = '@conditional.inner',
                        ['ai'] = '@conditional.outer',
                        ['iF'] = '@frame.inner',
                        ['aF'] = '@frame.outer',
                        ['if'] = '@function.inner',
                        ['af'] = '@function.outer',
                        ['il'] = '@loop.inner',
                        ['al'] = '@loop.outer',
                        ['ia'] = '@parameter.inner',
                        ['aa'] = '@parameter.outer',
                        ['as'] = '@statement.outer',
                    },
                },
                move = {
                    enable = true,
                    goto_next_start = {
                        [']b'] = '@block.inner',
                        [']j'] = '@call.outer',
                        [']y'] = '@class.outer',
                        [']o'] = '@comment.outer',
                        [']i'] = '@conditional.outer',
                        [']f'] = '@function.outer',
                        [']l'] = '@loop.outer',
                        [']a'] = '@parameter.inner',
                        [']s'] = '@statement.outer',
                    },
                    goto_next_end = {
                        [']B'] = '@block.inner',
                        [']J'] = '@call.outer',
                        [']Y'] = '@class.outer',
                        [']O'] = '@comment.outer',
                        [']I'] = '@conditional.outer',
                        [']F'] = '@function.outer',
                        [']L'] = '@loop.outer',
                        [']A'] = '@parameter.inner',
                        [']S'] = '@statement.outer',
                    },
                    goto_previous_start = {
                        ['[b'] = '@block.inner',
                        ['[j'] = '@call.outer',
                        ['[y'] = '@class.outer',
                        ['[o'] = '@comment.outer',
                        ['[i'] = '@conditional.outer',
                        ['[f'] = '@function.outer',
                        ['[l'] = '@loop.outer',
                        ['[a'] = '@parameter.inner',
                        ['[s'] = '@statement.outer',
                    },
                    goto_previous_end = {
                        ['[B'] = '@block.inner',
                        ['[J'] = '@call.outer',
                        ['[Y'] = '@class.outer',
                        ['[O'] = '@comment.outer',
                        ['[I'] = '@conditional.outer',
                        ['[F'] = '@function.outer',
                        ['[L'] = '@loop.outer',
                        ['[A'] = '@parameter.inner',
                        ['[S'] = '@statement.outer',
                    },
                },
            },
        }
EOF
'''
hook_post_update = '''
    TSUpdate
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
on_event = ['BufNew', 'BufRead']

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
    let g:polyglot_disabled = ['sensible']

    let g:vim_markdown_frontmatter = 1
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'
on_path = '^sudo:'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
on_map = '<Plug>NERDCommenter'
hook_add = '''
    nmap # <Plug>NERDCommenterToggle
    xmap # <Plug>NERDCommenterToggle
'''
hook_source = '''
    let g:NERDCommentWholeLinesInVMode = 1
    let g:NERDSpaceDelims = 1
    let g:NERDDefaultAlign = 'left'
    let g:NERDCustomDelimiters = {
        \ 'arduino': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' },
        \ 'c': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' },
        \ 'python': { 'left': '#', 'leftAlt': '#' },
        \ }
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_source = '''
    " Do not map <Esc> automatically
    let g:lexima_map_escape = ''
'''
hook_post_source = '''
    call lexima#set_default_rules()

    call lexima#add_rule({'char': '(', 'at': '\%#\w'})
    call lexima#add_rule({'char': '{', 'at': '\%#\w'})
    call lexima#add_rule({'char': '[', 'at': '\%#\w'})
    call lexima#add_rule({'char': '"', 'at': '\%#\w'})
    call lexima#add_rule({'char': "'", 'at': '\%#\w'})
    call lexima#add_rule({'char': '`', 'at': '\%#\w'})

    call lexima#add_rule({'char': '<CR>', 'at': '"""\%#"""', 'input_after': '<CR>'})
    call lexima#add_rule({'char': '<CR>', 'at': '"""\%#$', 'input_after': '<CR>)', 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1""""'})
    call lexima#add_rule({'char': '<CR>', 'at': "''" . "'\\%#'" . "''", 'input_after': '<CR>'})
    call lexima#add_rule({'char': '<CR>', 'at': "''" . "'\\%#$", 'input_after': '<CR>}', 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' + "''" . "'"})
    call lexima#add_rule({'char': '<CR>', 'at': '```\%#```', 'input_after': '<CR>'})
    call lexima#add_rule({'char': '<CR>', 'at': '```\%#$', 'input_after': '<CR>]', 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1```'})

    " Do not complete whenever popup menu is visible
    inoremap <silent> <CR> <C-]><C-g>u<C-r>=lexima#expand('<lt>CR>', 'i')<CR>
    " Close popup before calling `lexima#insmode#escape()`
    inoremap <silent><expr> <Esc> compe#close() . lexima#insmode#escape() . '<Esc>'
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'VimEnter'
hook_source = '''
    let g:surround_{char2nr('c')} = "\\\1command: \1{\r}"
    let g:surround_{char2nr('C')} = "\\\1command: \1{\n\r\n}"

    let g:surround_no_mappings = v:true

    nmap ds <Plug>Dsurround
    nmap cs <Plug>Csurround
    nmap cS <Plug>CSurround
    nmap ys <Plug>Ysurround
    nmap yS <Plug>YSurround
    nmap yss <Plug>Yssurround
    nmap ySs <Plug>YSsurround
    nmap ySS <Plug>YSsurround

    " Change to avoid conflicting with Hop
    xmap gs <Plug>VSurround
    xmap gS <Plug>VgSurround
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
hook_add = '''
    lua <<EOF
        require'hop'.setup {}
EOF

    nnoremap <silent> s <Cmd>lua require'hop'.hint_char2()<CR>
    xnoremap <silent> s <Cmd>lua require'hop'.hint_char2()<CR>
    nnoremap <silent> S <Cmd>lua require'hop'.hint_lines_skip_whitespace()<CR>
    xnoremap <silent> S <Cmd>lua require'hop'.hint_lines_skip_whitespace()<CR>
'''

[[plugins]]
repo = 'tpope/vim-speeddating'
on_map = ['<C-a>', '<C-x>']

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_map = { n = '<Space>t' } # Cannot use `<Leader>`
hook_source = '''
    " let g:table_mode_corner_corner = '+'
    " let g:table_mode_header_fillchar = '='
'''

[[plugins]]
repo = 'L3MON4D3/LuaSnip'
hook_add = '''
    inoremap <silent> <C-j> <Cmd>lua require'luasnip'.jump(1)<CR>
    inoremap <silent> <C-k> <Cmd>lua require'luasnip'.jump(-1)<CR>

    snoremap <silent> <C-j> <Cmd>lua require'luasnip'.jump(1)<CR>
    snoremap <silent> <C-k> <Cmd>lua require'luasnip'.jump(-1)<CR>
'''

[[plugins]]
repo = 'hrsh7th/nvim-compe'
on_event = 'InsertEnter'
hook_source = '''
    lua <<EOF
        vim.o.completeopt = 'menuone,noselect'

        require'compe'.setup {
            preselect = 'always',
            documentation = {
                border = 'rounded',
                winhighlight = 'NormalFloat:NormalFloat,FloatBorder:FloatBorder',
            },
            source = {
                path = {
                    kind = ' ',
                },
                buffer = {
                    kind = ' ',
                    menu = '[B]',
                },
                calc = {
                    kind = ' ',
                },
                nvim_lsp = true,
                nvim_lua = true,
                luasnip = {
                    kind = ' ',
                    menu = '[SNIP]',
                },
            },
        }

        local regex_start_with_nonspace = vim.regex([[^\S]])
        _G.super_tab = function()
            if vim.fn.pumvisible() ~= 0 then
                local break_undo = vim.api.nvim_replace_termcodes('<C-g>u', true, true, true)
                return break_undo .. vim.fn['compe#confirm']('<Tab>')
            end

            local row, col = unpack(vim.api.nvim_win_get_cursor(0))
            if col > 0 and regex_start_with_nonspace:match_line(0, row - 1, col - 1) then
                return vim.fn['compe#complete']()
            end

            return vim.api.nvim_replace_termcodes('<Tab>', true, true, true)
        end

        local opts = {
            noremap = true,
            silent = true,
            expr = true,
        }

        vim.api.nvim_set_keymap('i', '<Tab>', [[v:lua.super_tab()]], opts)
        vim.api.nvim_set_keymap('i', '<C-g>', [[compe#close()]], opts)
EOF
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'

[[plugins]]
repo = 'simrat39/rust-tools.nvim'
hook_add = '''
    " Patch for nvim-lsp-installer
    " See https://github.com/simrat39/rust-tools.nvim/issues/124
    augroup config_rust_tools
        autocmd!
        autocmd BufEnter * ++once autocmd! VimEnter *.rs
    augroup end
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
# Initialize after `:syntax enable` to do LSP formatting correctly
on_event = 'Syntax'
hook_source = '''
    lua <<EOF
        local configs = {
            bashls = {},
            clangd = {
                autoformat = { 'c', 'cpp' },
                args = { '--header-insertion=never' },
            },
            dockerls = {},
            jsonls = {
                autoformat = { 'json' },
            },
            pyright = {
                autoformat = { 'python' },
            },
            rust_analyzer = {
                autoformat = { 'rust' },
                opts = {
                    settings = {
                        ['rust-analyzer'] = {
                            checkOnSave = {
                                command = 'clippy',
                            },
                        },
                    },
                },
                on_attach = function(client, bufnr)
                    vim.cmd [[
                        augroup config_lsp_rust_buf
                            autocmd!
                            autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost <buffer> lua require'rust-tools.inlay_hints'.set_inlay_hints()
                        augroup end
                    ]]
                end,
                custom_setup = function(server, opts)
                    opts = vim.tbl_deep_extend('keep', opts, {
                        cmd = server:get_default_options().cmd,
                    })

                    require'rust-tools'.setup {
                        tools = {
                            autoSetHints = false,
                        },
                        server = opts,
                    }
                    server:attach_buffers()

                    -- Patch for nvim-lsp-installer
                    require'rust-tools'.start_standalone_if_required()
                end,
            },
            tailwindcss = {},
            texlab = {},
            vimls = {},
            efm = {
                opts = {
                    filetypes = { 'python' },
                    init_options = {
                        documentFormatting = true,
                    },
                    settings = {
                        rootMarkers = { '.git' },
                        languages = {
                            python = {
                                {
                                    formatCommand = 'black --quiet -',
                                    formatStdin = true,
                                },
                            },
                        },
                    },
                },
            },
        }

        local signature_config = {
            hint_prefix = ' ',
        }

        -- This can override in project configuration
        vim.g.autoformat_disable_ft = {}

        vim.g.autoformat_enable_ft = {}
        for _, config in pairs(configs) do
            if config.autoformat then
                vim.g.autoformat_enable_ft = vim.list_extend(vim.g.autoformat_enable_ft, config.autoformat)
            end
        end

        _G.autoformat = function()
            local function to_bool(x)
                return x and x ~= 0
            end

            if to_bool(vim.b.autoformat_disable) then
                return
            end

            if not to_bool(vim.b.autoformat_enable) then
                if vim.tbl_contains(vim.g.autoformat_disable_ft, vim.bo.filetype) then
                    return
                end

                if not vim.tbl_contains(vim.g.autoformat_enable_ft, vim.bo.filetype) then
                    return
                end
            end

            vim.lsp.buf.formatting_sync(nil, 1000)
        end

        local function on_attach(client, bufnr)
            require'lsp_signature'.on_attach(signature_config)

            local function buf_set_keymap(...)
                vim.api.nvim_buf_set_keymap(bufnr, ...)
            end

            local opts = {
                noremap = true,
                silent = true,
            }

            buf_set_keymap('n', 'gd',
                [[<Cmd>lua require('telescope.builtin').lsp_definitions {}<CR>]], opts)
            buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
            buf_set_keymap('n', 'gi',
                [[<Cmd>lua require('telescope.builtin').lsp_implementations {}<CR>]], opts)
            buf_set_keymap('n', 'g<C-d>', '<Cmd>lua vim.lsp.buf.type_definition()<CR>', opts)

            buf_set_keymap('n', '<M-y>',
                [[<Cmd>lua require('telescope.builtin').lsp_document_symbols {}<CR>]], opts)
            buf_set_keymap('n', '<M-Y>',
                [[<Cmd>lua require('telescope.builtin').lsp_workspace_symbols {}<CR>]], opts)
            buf_set_keymap('n', 'gr', '<Cmd>lua vim.lsp.buf.reference()<CR>', opts)
            buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
            buf_set_keymap('n', 'gs', '<Cmd>lua vim.lsp.buf.signature_help()<CR>', opts)

            buf_set_keymap('n', 'gf', '<Cmd>lua vim.lsp.buf.formatting()<CR>', opts)
            buf_set_keymap('x', 'gf', '<Cmd>lua vim.lsp.buf.range_formatting()<CR>', opts)

            buf_set_keymap('n', 'gn', '<Cmd>lua vim.lsp.buf.rename()<CR>', opts)
            buf_set_keymap('n', '<Leader>a',
                [[<Cmd>lua require('telescope.builtin').lsp_code_actions {}<CR>]], opts)

            buf_set_keymap('n', '<M-a>',
                [[<Cmd>lua require('telescope.builtin').lsp_document_diagnostics {}<CR>]], opts)
            buf_set_keymap('n', '<M-A>',
                [[<Cmd>lua require('telescope.builtin').lsp_workspace_diagnostics {}<CR>]], opts)
            buf_set_keymap('n', '[d', '<Cmd>lua vim.diagnostic.goto_prev { wrap = false }<CR>', opts)
            buf_set_keymap('n', ']d', '<Cmd>lua vim.diagnostic.goto_next { wrap = false }<CR>', opts)
            buf_set_keymap('x', '[d', '<Cmd>lua vim.diagnostic.goto_prev { wrap = false }<CR>', opts)
            buf_set_keymap('x', ']d', '<Cmd>lua vim.diagnostic.goto_next { wrap = false }<CR>', opts)

            vim.b.autoformat_disable = false
            vim.b.autoformat_enable = false

            vim.cmd [[
                augroup config_lsp_buf
                    autocmd!
                    autocmd BufWritePre <buffer> call v:lua.autoformat()
                augroup end
            ]]

            vim.lsp.handlers['textDocument/hover'] =
                vim.lsp.with(vim.lsp.handlers.hover, { border = 'rounded' })
        end

        local capabilities = vim.lsp.protocol.make_client_capabilities()
        capabilities.textDocument.completion.completionItem.snippetSupport = true
        capabilities.textDocument.completion.completionItem.resolveSupport = {
            properties = {
                'documentation',
                'detail',
                'additionalTextEdits',
            }
        }

        require'nvim-lsp-installer'.on_server_ready(function(server)
            local opts = {}
            local cmd = nil
            local attach = on_attach

            local setup = function(server, opts)
                server:setup(opts)
            end

            local config = configs[server.name]
            if config then
                if config.opts then
                    opts = config.opts
                end

                if config.args then
                    local function tbl_clone(t)
                        local result = {}
                        for k, v in pairs(t) do
                            result[k] = v
                        end
                        return result
                    end

                    cmd = tbl_clone(require'lspconfig'[server.name].document_config.default_config.cmd)
                    cmd = vim.list_extend(cmd, config.args)
                end

                if config.on_attach then
                    local config_on_attach = config.on_attach
                    attach = function(client, bufnr)
                        on_attach(client, bufnr)
                        config_on_attach(client, bufnr)
                    end
                end

                if config.custom_setup then
                    setup = config.custom_setup
                end
            end

            opts = vim.tbl_deep_extend('keep', opts, {
                cmd = cmd,
                on_attach = attach,
                capabilities = capabilities,
            })

            setup(server, opts)
        end)

        local signs = {
            Error = ' ',
            Warn = ' ',
            Hint = ' ',
            Info = ' ',
        }

        for type, text in pairs(signs) do
            local hl = 'DiagnosticSign' .. type
            vim.fn.sign_define(hl, { text = text, texthl = hl, numhl = '' })
        end

        local kinds = {
            Text          = ' ',
            Method        = ' ',
            Function      = 'ƒ ',
            Constructor   = ' ',
            Field         = ' ',
            Variable      = ' ',
            Class         = ' ',
            Interface     = ' ',
            Module        = ' ',
            Property      = ' ',
            Unit          = ' ',
            Value         = ' ',
            Enum          = ' ',
            Keyword       = ' ',
            Snippet       = ' ',
            Color         = ' ',
            File          = ' ',
            Reference     = ' ',
            Folder        = ' ',
            EnumMember    = ' ',
            Constant      = ' ',
            Struct        = ' ',
            Event         = ' ',
            Operator      = ' ',
            TypeParameter = ' ',
        }

        for name, str in pairs(kinds) do
            if vim.lsp.protocol.CompletionItemKind[name] ~= nil then
                vim.lsp.protocol.CompletionItemKind[vim.lsp.protocol.CompletionItemKind[name]] = str
            end
        end

        vim.cmd [[
            augroup config_lsp
                autocmd!
                " Set rounded border to the window opened by `LspInfo`
                autocmd FileType lspinfo call nvim_win_set_config(0, { 'border': 'rounded' })
            augroup end
        ]]
EOF
'''
