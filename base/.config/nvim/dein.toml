[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'sainnhe/sonokai'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-lua/popup.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
on_lua = 'telescope'
hook_add = '''
    nnoremap <M-b> <Cmd>lua require('telescope.builtin').buffers {ignore_current_buffer = true, sort_lastused = true}<CR>
    nnoremap <M-f> <Cmd>lua require('telescope.builtin').find_files {follow = true, hidden = true}<CR>
    nnoremap <M-F> <Cmd>lua require('telescope.builtin').file_browser {}<CR>
    nnoremap <M-g> <Cmd>lua require('telescope.builtin').current_buffer_fuzzy_find {}<CR>
    nnoremap <M-G> <Cmd>lua require('telescope.builtin').live_grep {}<CR>
    nnoremap <M-t> <Cmd>lua require('telescope.builtin').treesitter {}<CR>
'''
hook_source = '''
    lua <<EOF
        require'telescope'.setup {
            defaults = {
                mappings = {
                    i = {
                        ['<Esc>'] = 'close',
                    },
                },
            },
        }
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
rev = '0.5-compat'
on_event = 'BufRead'
hook_source = '''
    lua <<EOF
        require'nvim-treesitter.configs'.setup {
            ensure_installed = 'maintained',
            ignore_install = {},
            highlight = {
                enable = true,
                disable = {},
            },
            incremental_selection = {
                enable = true,
                keymaps = {
                    node_incremental = 'J',
                    node_decremental = 'K',
                },
            },
            indent = {
                enable = true,
            },
        }
EOF
'''
hook_post_update = '''
    TSUpdate
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
    let g:polyglot_disabled = ['sensible']

    let g:vim_markdown_frontmatter = 1
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'
on_path = '^sudo:'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
    let g:NERDCommentWholeLinesInVMode = 1
    let g:NERDSpaceDelims = 1
    let g:NERDDefaultAlign = 'left'
    let g:NERDCustomDelimiters = {
        \ 'c': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' },
        \ 'arduino': { 'left': '//', 'leftAlt': '/*', 'rightAlt': '*/' },
        \ }
'''
hook_post_source = '''
    nmap # <Plug>NERDCommenterToggle
    vmap # <Plug>NERDCommenterToggle
'''

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
    " Do not map <Esc> automatically
    let g:lexima_map_escape = ''
'''
hook_post_source = '''
    call lexima#set_default_rules()

    call lexima#add_rule({'char': '(', 'at': '\%#\w'})
    call lexima#add_rule({'char': '{', 'at': '\%#\w'})
    call lexima#add_rule({'char': '[', 'at': '\%#\w'})
    call lexima#add_rule({'char': '"', 'at': '\%#\w'})
    call lexima#add_rule({'char': "'", 'at': '\%#\w'})
    call lexima#add_rule({'char': '`', 'at': '\%#\w'})

    call lexima#add_rule({'char': '<CR>', 'at': '"""\%#"""', 'input_after': '<CR>'})
    call lexima#add_rule({'char': '<CR>', 'at': '"""\%#$', 'input_after': '<CR>)', 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1""""'})
    call lexima#add_rule({'char': '<CR>', 'at': "''" . "'\\%#'" . "''", 'input_after': '<CR>'})
    call lexima#add_rule({'char': '<CR>', 'at': "''" . "'\\%#$", 'input_after': '<CR>}', 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1' + "''" . "'"})
    call lexima#add_rule({'char': '<CR>', 'at': '```\%#```', 'input_after': '<CR>'})
    call lexima#add_rule({'char': '<CR>', 'at': '```\%#$', 'input_after': '<CR>]', 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1```'})

    " Do not complete whenever popup menu is visible
    inoremap <CR> <C-g>u<C-r>=lexima#expand('<lt>CR>', 'i')<CR>
    " Close popup before calling `lexima#insmode#escape()`
    inoremap <expr> <Esc> (pumvisible() ? '<C-e>' : '') . lexima#insmode#escape() . '<Esc>'
'''

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
    let g:surround_{char2nr('c')} = "\\\1command: \1{\r}"
    let g:surround_{char2nr('C')} = "\\\1command: \1{\n\r\n}"
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
on_lua = 'hop'
hook_add = '''
    nnoremap <silent> s <Cmd>lua require'hop'.hint_char2()<CR>
    xnoremap <silent> s <Cmd>lua require'hop'.hint_char2()<CR>
'''
hook_source = '''
    lua <<EOF
        require'hop'.setup {
            create_hl_autocmd = true,
        }
EOF
'''

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = '''
    " let g:table_mode_corner_corner = '+'
    " let g:table_mode_header_fillchar = '='
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_source = '''
    lua <<EOF
        local nvim_lsp = require'lspconfig'

        local function on_attach(client, bufnr)
        end

        local servers = {
            'clangd',
            'pyright',
            'rust_analyzer',
        }
        for _, lsp in ipairs(servers) do
            nvim_lsp[lsp].setup {
                on_attach = on_attach,
            }
        end
EOF
'''
